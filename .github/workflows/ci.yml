name: Comprehensive API Testing CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run health checks daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  ENVIRONMENT: 'development'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run type checking with mypy
      run: |
        mypy --follow-imports=silent --ignore-missing-imports tests/
    
    - name: Run code formatting check
      run: |
        black --check tests/
    
    - name: Run import sorting check
      run: |
        isort --check-only tests/
    
    - name: Run linting with flake8
      run: |
        flake8 tests/ --max-line-length=100 --extend-ignore=E203,W503

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        environment: [development, staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run smoke tests
      env:
        ENVIRONMENT: ${{ matrix.environment }}
        PYTEST_RETRY_COUNT: 3
        API_TIMEOUT: 15
      run: |
        pytest tests/end_to_end/ \
          -m "smoke" \
          --reruns 3 \
          --reruns-delay 2 \
          --html=reports/smoke-report-${{ matrix.environment }}.html \
          --self-contained-html \
          --junitxml=reports/smoke-junit-${{ matrix.environment }}.xml \
          -v --tb=short
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-reports-${{ matrix.environment }}
        path: reports/
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    
    strategy:
      matrix:
        test-group: [users, authentication, health_check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run integration tests
      env:
        ENVIRONMENT: development
        PYTEST_TAG: ${{ matrix.test-group }}
        PYTEST_RETRY_COUNT: 2
        API_TIMEOUT: 30
        PARALLEL_WORKERS: 4
      run: |
        pytest tests/end_to_end/ \
          -m "${{ matrix.test-group }}" \
          --reruns 2 \
          --reruns-delay 1 \
          --html=reports/integration-${{ matrix.test-group }}-report.html \
          --self-contained-html \
          --junitxml=reports/integration-${{ matrix.test-group }}-junit.xml \
          -n 4 \
          -v --tb=short
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-reports-${{ matrix.test-group }}
        path: reports/
        retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: false  # Disabled - performance tests not run in CI pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run performance tests
      env:
        ENVIRONMENT: development
        PERFORMANCE_DURATION: 30
        MAX_RPS: 50
      run: |
        pytest tests/performance/test_breaking_point.py::test_posts_breaking_point \
          --html=reports/performance-report.html \
          --self-contained-html \
          --junitxml=reports/performance-junit.xml \
          -v --tb=short
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-reports
        path: reports/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r tests/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  health-check:
    name: Scheduled Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run health check tests
      env:
        ENVIRONMENT: production
        API_TIMEOUT: 10
      run: |
        pytest tests/end_to_end/test_health_check.py \
          --html=reports/health-check-report.html \
          --self-contained-html \
          --junitxml=reports/health-check-junit.xml \
          -v
    
    - name: Upload health check reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: health-check-reports
        path: reports/
        retention-days: 7
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Scheduled Health Check Failed',
            body: `The scheduled health check failed on ${new Date().toISOString()}.
            
            Please check the API endpoints and investigate any issues.
            
            Workflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}`,
            labels: ['health-check', 'urgent']
          })

  deploy-reports:
    name: Deploy Test Reports
    runs-on: ubuntu-latest
    needs: [smoke-tests, integration-tests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-reports
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      continue-on-error: true
      id: pages-config
    
    - name: Build report index
      run: |
        mkdir -p public
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>API Testing Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .report-section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                .report-link { display: block; margin: 10px 0; padding: 10px; background: #f5f5f5; text-decoration: none; color: #333; border-radius: 3px; }
                .report-link:hover { background: #e5e5e5; }
            </style>
        </head>
        <body>
            <h1>ðŸ§ª Comprehensive API Testing Reports</h1>
            <p>Latest test reports from the CI/CD pipeline</p>
            
            <!-- Test coverage disabled for testing framework -->
            
            <div class="report-section">
                <h2>ðŸ’¨ Smoke Tests</h2>
                <a href="smoke-development.html" class="report-link">Development Environment</a>
                <a href="smoke-staging.html" class="report-link">Staging Environment</a>
            </div>
            
            <div class="report-section">
                <h2>ðŸ”— Integration Tests</h2>
                <a href="integration-users.html" class="report-link">User Management Tests</a>
                <a href="integration-authentication.html" class="report-link">Authentication Tests</a>
                <a href="integration-health-check.html" class="report-link">Health Check Tests</a>
            </div>
            
            <!-- Performance tests disabled in CI pipeline -->
            
            <p><small>Generated: $(date)</small></p>
        </body>
        </html>
        EOF
        
        # Copy reports to public directory
        find all-reports -name "*.html" -exec cp {} public/ \;
        # Coverage reports disabled for testing framework
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      if: steps.pages-config.outcome == 'success'
      with:
        path: public
    
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
      if: steps.pages-config.outcome == 'success'
    
    - name: Upload reports as artifacts (fallback)
      uses: actions/upload-artifact@v4
      if: steps.pages-config.outcome != 'success'
      with:
        name: test-reports-dashboard
        path: public/
        retention-days: 30
